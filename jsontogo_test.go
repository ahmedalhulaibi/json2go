package jsontogo

import (
	"reflect"
	"testing"
)

func Test_jsonToGo(t *testing.T) {
	type args struct {
		jsonString []byte
		typename   string
	}
	tests := []struct {
		name    string
		args    args
		want    string
		wantErr bool
	}{
		{name: "Numeric Decimal - Uppercase", wantErr: false, args: args{typename: "AutoGenerated", jsonString: []byte("{\"NumericDecimal\":1.0}")}, want: "type AutoGenerated struct { NumericDecimal float64 `json:\"NumericDecimal\"`}"},
		{name: "Numeric Decimal - Lowercase", wantErr: false, args: args{typename: "AutoGenerated", jsonString: []byte("{\"numericDecimal\":1.0}")}, want: "type AutoGenerated struct { NumericDecimal float64 `json:\"numericDecimal\"`}"},
		{name: "Numeric Integer - Uppercase", wantErr: false, args: args{typename: "AutoGenerated", jsonString: []byte("{\"NumericInteger\":1}")}, want: "type AutoGenerated struct { NumericInteger int `json:\"NumericInteger\"`}"},
		{name: "Numeric Integer - Lowercase", wantErr: false, args: args{typename: "AutoGenerated", jsonString: []byte("{\"numericInteger\":1}")}, want: "type AutoGenerated struct { NumericInteger int `json:\"numericInteger\"`}"},
		{name: "Boolean         - Uppercase", wantErr: false, args: args{typename: "AutoGenerated", jsonString: []byte("{\"MyBool\":true}")}, want: "type AutoGenerated struct { MyBool bool `json:\"MyBool\"`}"},
		{name: "Boolean         - Lowercase", wantErr: false, args: args{typename: "AutoGenerated", jsonString: []byte("{\"myBool\":true}")}, want: "type AutoGenerated struct { MyBool bool `json:\"myBool\"`}"},
		{name: "String          - Uppercase", wantErr: false, args: args{typename: "AutoGenerated", jsonString: []byte("{\"MyString\":\"data\"}")}, want: "type AutoGenerated struct { MyString string `json:\"MyString\"`}"},
		{name: "String          - Lowercase", wantErr: false, args: args{typename: "AutoGenerated", jsonString: []byte("{\"myString\":\"data\"}")}, want: "type AutoGenerated struct { MyString string `json:\"myString\"`}"},
		{name: "Null            - Uppercase", wantErr: false, args: args{typename: "AutoGenerated", jsonString: []byte("{\"MyNull\":null}")}, want: "type AutoGenerated struct { MyNull interface{} `json:\"MyNull\"`}"},
		{name: "Null            - Lowercase", wantErr: false, args: args{typename: "AutoGenerated", jsonString: []byte("{\"myNull\":null}")}, want: "type AutoGenerated struct { MyNull interface{} `json:\"myNull\"`}"},
		{name: "Object          - Uppercase", wantErr: false, args: args{typename: "AutoGenerated", jsonString: []byte("{\"MyObject\":{\"NumericDecimal\":1.0}}")}, want: "type AutoGenerated struct { MyObject struct{NumericDecimal float64 `json:\"NumericDecimal\"`} `json:\"MyObject\"`}"},
		{name: "Object          - Lowercase", wantErr: false, args: args{typename: "AutoGenerated", jsonString: []byte("{\"myObject\":{\"NumericDecimal\":1.0}}")}, want: "type AutoGenerated struct { MyObject struct{NumericDecimal float64 `json:\"NumericDecimal\"`} `json:\"myObject\"`}"},
		{name: "Array Decimal   - Uppercase", wantErr: false, args: args{typename: "AutoGenerated", jsonString: []byte("{\"MyArray\":[1.0,2.0,3.0]}")}, want: "type AutoGenerated struct { MyArray []float64 `json:\"MyObject\"`}"},
		{name: "Array Decimal   - Lowercase", wantErr: false, args: args{typename: "AutoGenerated", jsonString: []byte("{\"myArray\":[1.0,2.0,3.0]}")}, want: "type AutoGenerated struct { MyObject struct{NumericDecimal float64 `json:\"NumericDecimal\"`} `json:\"MyObject\"`}"},
		{name: "Array Integer   - Uppercase", wantErr: false, args: args{typename: "AutoGenerated", jsonString: []byte("{\"myObject\":{\"NumericDecimal\":1.0}}")}, want: "type AutoGenerated struct { MyObject struct{NumericDecimal float64 `json:\"NumericDecimal\"`} `json:\"myObject\"`}"},
		{name: "Array Integer   - Lowercase", wantErr: false, args: args{typename: "AutoGenerated", jsonString: []byte("{\"myObject\":{\"NumericDecimal\":1.0}}")}, want: "type AutoGenerated struct { MyObject struct{NumericDecimal float64 `json:\"NumericDecimal\"`} `json:\"myObject\"`}"},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := jsonToGo(tt.args.jsonString, tt.args.typename)
			if (err != nil) != tt.wantErr {
				t.Errorf("jsonToGo() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(string(got), tt.want) {
				t.Errorf("jsonToGo() = %v,\nwant %v\n", string(got), tt.want)
			}
		})
	}
}
