package jsontogo

import (
	"go/format"
	"reflect"
	"testing"
)

func Test_jsonToGo(t *testing.T) {
	type args struct {
		jsonString []byte
		typename   string
	}
	tests := []struct {
		name    string
		args    args
		want    string
		wantErr bool
	}{
		{name: "Numeric Decimal - Uppercase", wantErr: false, args: args{typename: "AutoGenerated", jsonString: []byte("{\"NumericDecimal\":-1.0}")}, want: "type AutoGenerated struct { NumericDecimal float64 `json:\"NumericDecimal\"`}"},
		{name: "Numeric Decimal - Lowercase", wantErr: false, args: args{typename: "AutoGenerated", jsonString: []byte("{\"numericDecimal\":1.0}")}, want: "type AutoGenerated struct { NumericDecimal float64 `json:\"numericDecimal\"`}"},
		{name: "Numeric Integer - Lowercase", wantErr: false, args: args{typename: "AutoGenerated", jsonString: []byte("{\"numericInteger\":1}")}, want: "type AutoGenerated struct { NumericInteger int `json:\"numericInteger\"`}"},
		{name: "Boolean         - Lowercase", wantErr: false, args: args{typename: "AutoGenerated", jsonString: []byte("{\"myBool\":true}")}, want: "type AutoGenerated struct { MyBool bool `json:\"myBool\"`}"},
		{name: "String          - Lowercase", wantErr: false, args: args{typename: "AutoGenerated", jsonString: []byte("{\"myString\":\"data\"}")}, want: "type AutoGenerated struct { MyString string `json:\"myString\"`}"},
		{name: "Null            - Lowercase", wantErr: false, args: args{typename: "AutoGenerated", jsonString: []byte("{\"myNull\":null}")}, want: "type AutoGenerated struct { MyNull interface{} `json:\"myNull\"`}"},
		{name: "Object          - Uppercase", wantErr: false, args: args{typename: "AutoGenerated", jsonString: []byte("{\"MyObject\":{\"NumericDecimal\":1.0}}")}, want: "type AutoGenerated struct { MyObject struct{NumericDecimal float64 `json:\"NumericDecimal\"`} `json:\"MyObject\"`}"},
		{name: "Array Decimal   - Uppercase", wantErr: false, args: args{typename: "AutoGenerated", jsonString: []byte("{\"MyArray\":[1.0,-2.0,3.0]}")}, want: "type AutoGenerated struct { MyArray []float64 `json:\"MyArray\"`}"},
		{name: "Array Integer   - Uppercase", wantErr: false, args: args{typename: "AutoGenerated", jsonString: []byte("{\"MyArray\":[1,2,3]}")}, want: "type AutoGenerated struct { MyArray []int `json:\"MyArray\"`}"},
		{name: "Array String    - Uppercase", wantErr: false, args: args{typename: "AutoGenerated", jsonString: []byte("{\"MyArray\":[\"string1\",\"string2\",\"string3\"]}")}, want: "type AutoGenerated struct { MyArray []string `json:\"MyArray\"`}"},
		{name: "Array Mixed Num - Uppercase", wantErr: false, args: args{typename: "AutoGenerated", jsonString: []byte("{\"MyArray\":[1.0,2,3]}")}, want: "type AutoGenerated struct { MyArray []float64 `json:\"MyArray\"`}"},
		{name: "Array Mixed     - Uppercase", wantErr: false, args: args{typename: "AutoGenerated", jsonString: []byte("{\"MyArray\":[1.0,2,\"strings\",{\"myDec\":1.0},{\"myInt\":2}]}")}, want: "type AutoGenerated struct { MyArray []interface{} `json:\"MyArray\"`}"},
		{name: "Array Obj       - Uppercase", wantErr: false, args: args{typename: "AutoGenerated", jsonString: []byte("{\"MyArray\":[{\"myDec\":1.0},{\"myInt\":2}]}")}, want: "type AutoGenerated struct { MyArray []struct { MyDec float64 `json:\"myDec\"`\nMyInt int `json:\"myInt\"`\n} `json:\"MyArray\"`}"},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := jsonToGo(tt.args.jsonString, tt.args.typename)
			if (err != nil) != tt.wantErr {
				t.Fatalf("jsonToGo() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			//TODO: Format tt.want using format.Source before comparing
			if formattedWant, err := format.Source([]byte(tt.want)); err != nil {
				t.Errorf("Failed to format want: %v", err)
			} else {
				tt.want = string(formattedWant)
			}

			if !reflect.DeepEqual(string(got), tt.want) {
				t.Errorf("given = %s jsonToGo() = %v,\nwant %v\n", string(tt.args.jsonString), string(got), tt.want)
			}
		})
	}
}
