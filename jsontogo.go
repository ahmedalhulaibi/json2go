package jsontogo

import (
	"bytes"
	"encoding/json"
	"fmt"
	"log"
	"reflect"
	"regexp"
	"strings"

	"github.com/alecthomas/template"
)

type TemplateData struct {
	Typename string
	JsonMap  map[string]interface{}
}

const structTemplate = `type {{.Typename}} struct {{"{"}}
{{range $index, $element := .JsonMap}}
	{{title $index}} {{getType $element}} ` + "`json:\"{{lower $index}}\"`" + `
{{end}}
{{"}"}}`

func jsonToGo(jsonString []byte, typename string) ([]byte, error) {
	//Edit JSON string before unmarshal and change all numeric with decimal to 1.1
	//This is to identify float64 vs int before outputting struct
	re := regexp.MustCompile(`[0-9]*\.[0-9]*`)
	jsonString = re.ReplaceAll(jsonString, []byte("1.1"))
	log.Println("jsonToGo replace: ", string(jsonString))

	var tData TemplateData
	if typename == "" {
		typename = "AutoGenerated"
	}

	tData.Typename = typename
	tData.JsonMap = make(map[string]interface{})

	if err := json.Unmarshal(jsonString, &tData.JsonMap); err != nil {
		return jsonString, err
	}
	log.Println(tData.JsonMap)

	return mapToStruct(tData)
}

func mapToStruct(tData TemplateData) ([]byte, error) {
	funcMap := template.FuncMap{
		"getType": GetType,
		"title":   strings.Title,
		"lower":   strings.ToLower,
	}
	t := template.Must(template.New("structTemplate").Funcs(funcMap).Parse(structTemplate))

	var buf bytes.Buffer
	err := t.Execute(&buf, tData)

	return buf.Bytes(), err
}

func isDecimal(dec string) bool {
	re := regexp.MustCompile(`[0-9]*\.[0-9]*`)
	return re.MatchString(dec)
}

func GetType(v interface{}) string {
	log.Println("GetType", reflect.TypeOf(v))
	typename := fmt.Sprint(reflect.TypeOf(v))
	log.Println("GetType typename ", typename)
	switch typename {
	case "float64":
		log.Printf("GetType element value: %v\n", v.(float64))
		if isDecimal(fmt.Sprintf("%v", v)) {
			return typename
		}
		return "int"
	case "bool":
		return typename
	case "string":
		return "string"
	case "map[string]interface {}":
		return "struct"
	case "[]interface {}":
		return "array"
	default:
		return "interface{}"
	}
}
